# run.py
import webview
import uvicorn
import multiprocessing
import time
import os
import sys
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_server_health(max_attempts=40, delay=0.5):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://127.0.0.1:8000/health", timeout=2)
            if response.status_code == 200:
                health_data = response.json()
                logger.info(f"‚úÖ Server health check passed: {health_data}")
                return True
        except requests.exceptions.RequestException:
            pass
        
        logger.info(f"‚è≥ Waiting for server... (attempt {attempt + 1}/{max_attempts})")
        time.sleep(delay)
    
    return False

def start_server():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    try:
        from backend import create_app
        app = create_app()
        uvicorn.run(
            app, 
            host="127.0.0.1", 
            port=8000, 
            log_level="info",
            access_log=True
        )
    except Exception as e:
        logger.error(f"‚ùå Server startup failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    multiprocessing.freeze_support()
    
    logger.info("üöÄ --- STARTING THE ORCHESTRATOR APPLICATION ---")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        server_process = multiprocessing.Process(target=start_server, daemon=True)
        server_process.start()
        logger.info(f"‚úÖ Server process started with PID: {server_process.pid}")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è
        logger.info("‚è≥ Waiting for server to initialize...")
        
        if not check_server_health():
            logger.error("‚ùå Server failed to start within timeout period")
            if server_process.is_alive():
                server_process.terminate()
                server_process.join()
            sys.exit(1)
        
        logger.info("‚úÖ Server is healthy and ready!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            info_response = requests.get("http://127.0.0.1:8000/info", timeout=5)
            if info_response.status_code == 200:
                info_data = info_response.json()
                logger.info(f"üìä Server info: {info_data}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not get server info: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ
        logger.info("ü™ü Creating application window...")
        window = webview.create_window(
            title="The Orchestrator",
            url="http://127.0.0.1:8000",
            width=1200,
            height=800,
            min_size=(800, 600),
            resizable=True,
            shadow=True,
            on_top=False
        )
        
        logger.info("üéØ Starting webview...")
        webview.start(debug=False)  # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted by user")
    except Exception as e:
        logger.error(f"‚ùå Application error: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.info("üßπ Cleaning up...")
        
        if 'server_process' in locals() and server_process.is_alive():
            logger.info("üõë Terminating server process...")
            server_process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            try:
                server_process.join(timeout=5)
                if server_process.is_alive():
                    logger.warning("‚ö†Ô∏è Server process did not terminate gracefully, killing...")
                    server_process.kill()
            except Exception as e:
                logger.error(f"‚ùå Error terminating server process: {e}")
        
        logger.info("‚úÖ Application has been closed successfully.")
        sys.exit(0)