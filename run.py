# run.py - –í–ï–†–°–ò–Ø –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ë–û–†–ö–û–ô

import webview
import uvicorn
import multiprocessing
import time
import os
import sys
import requests
import logging
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —è—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def auto_build_frontend():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    """
    frontend_dir = "my-copilot-app"
    
    if not os.path.exists(frontend_dir):
        logger.warning(f"‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {frontend_dir}")
        return False
    
    try:
        logger.info(f"üî® –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä–∫—É React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ {frontend_dir}...")
        
        # --- –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (npm install) ---
        node_modules_path = os.path.join(frontend_dir, "node_modules")
        if not os.path.exists(node_modules_path):
            logger.info("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ node_modules. –ó–∞–ø—É—Å–∫–∞—é npm install...")
            install_process = subprocess.run(
                ["npm", "install"], 
                cwd=frontend_dir,       # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                capture_output=True, 
                text=True,
                shell=True,             # –ò—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å npm –≤ Windows
                timeout=300             # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
            )
            
            if install_process.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ npm install:\n{install_process.stderr}")
                return False
            
            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        
        # --- –®–ê–ì 2: –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (npm run build) ---
        logger.info("üèóÔ∏è –í—ã–ø–æ–ª–Ω—è—é npm run build...")
        build_process = subprocess.run(
            ["npm", "run", "build"], 
            cwd=frontend_dir, 
            capture_output=True, 
            text=True,
            shell=True,
            timeout=120 # –¢–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã
        )
        
        if build_process.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{build_process.stderr}")
            return False
            
        logger.info("‚úÖ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ dist –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
        dist_path = os.path.join(frontend_dir, "dist")
        if os.path.exists(dist_path):
            logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: {dist_path}")
            return True
        else:
            logger.warning("‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –ø–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
        return False
    except FileNotFoundError:
        logger.error("‚ùå –ö–æ–º–∞–Ω–¥–∞ npm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js –∏ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH.")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: {e}")
        return False

def check_server_health(max_attempts=40, delay=0.5):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://127.0.0.1:8000/health", timeout=2)
            if response.status_code == 200:
                health_data = response.json()
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {health_data}")
                return True
        except requests.exceptions.RequestException:
            pass
        
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
        time.sleep(delay)
    
    return False

def start_server():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é backend.py
        from backend import create_app
        app = create_app()
        uvicorn.run(
            app, 
            host="127.0.0.1", 
            port=8000, 
            log_level="info",
            access_log=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    multiprocessing.freeze_support()
    
    logger.info("üöÄ --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø THE ORCHESTRATOR ---")
    
    try:
        # --- –≠–¢–ê–ü 1: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ë–û–†–ö–ê FRONTEND ---
        logger.info("üîß –≠—Ç–∞–ø 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ frontend...")
        build_success = auto_build_frontend()
        
        if not build_success:
            logger.error("‚ùå –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å. –î–∞–ª—å–Ω–µ–π—à–∏–π –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –≤—Ä—É—á–Ω—É—é: cd my-copilot-app && npm run build")
            sys.exit(1) # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ
        
        # --- –≠–¢–ê–ü 2: –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
        logger.info("üîß –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
        server_process = multiprocessing.Process(target=start_server, daemon=True)
        server_process.start()
        logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: {server_process.pid}")
        
        # --- –≠–¢–ê–ü 3: –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê ---
        logger.info("üîß –≠—Ç–∞–ø 3: –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        if not check_server_health():
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
            if server_process.is_alive():
                server_process.terminate()
                server_process.join()
            sys.exit(1)
        
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∏—Å–ø—Ä–∞–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # --- –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –ò –ó–ê–ü–£–°–ö –û–ö–ù–ê ---
        logger.info("üîß –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        window = webview.create_window(
            title="The Orchestrator üé≠",
            url="http://127.0.0.1:8000",
            width=1200,
            height=800,
            min_size=(800, 600),
        )
        
        logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ß–∞—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
        webview.start(debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        if 'server_process' in locals() and server_process.is_alive():
            logger.info("üõë –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞...")
            server_process.terminate()
            server_process.join(timeout=5)
            if server_process.is_alive():
                logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —à—Ç–∞—Ç–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                server_process.kill()
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        sys.exit(0)