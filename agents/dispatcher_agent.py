# agents/dispatcher_agent.py - УЛУЧШЕНА ЛОГИКА КЛАССИФИКАЦИИ

from .base_agent import BaseAgent
from llama_cpp import Llama
import json
import re

class DispatcherAgent(BaseAgent):
    def __init__(self, llm_instance: Llama, log_callback):
        # ИЗМЕНЕНО: Промпт полностью переписан для более четкого разделения задач
        system_prompt = """Твоя задача — классифицировать запрос пользователя и определить, какая команда агентов и какая AI-модель должны его обработать.

**МОДЕЛИ:**
- `default`: Универсальная модель для общения, исследований, браузинга.
- `coding`: Специализированная модель, заточенная под написание, анализ и рефакторинг кода.

**КОМАНДЫ И ИХ ОБЛАСТИ ОТВЕТСТВЕННОСТИ:**

1.  **`browsing` (Легкий поиск и действия в браузере):**
    *   **Когда использовать:** Для **конкретных, целенаправленных запросов**, требующих найти один факт или выполнить одно действие.
    *   **Примеры:**
        *   "какая погода в набережных челнах?"
        *   "какой сейчас курс доллара?"
        *   "зайди на сайт x и найди телефон поддержки"
        *   "скинь последний пост трампа"
    *   **Модель:** `default`

2.  **`research` (Глубокое исследование):**
    *   **Когда использовать:** Для **широких, аналитических запросов**, требующих изучить несколько источников, сравнить их и составить сводный отчет.
    *   **Примеры:**
        *   "проанализируй рынок беспилотных автомобилей"
        *   "сравни фреймворки FastAPI и Django, выдели плюсы и минусы"
        *   "найди информацию о причинах упадка майя"
    *   **Модель:** `default`

3.  **`coding` (Работа с кодом):**
    *   **Когда использовать:** Любой запрос, связанный с написанием, анализом, исправлением или рефакторингом кода.
    *   **Примеры:**
        *   "напиши скрипт на питоне для парсинга сайта"
        *   "проверь этот файл на ошибки"
        *   "добавь новую функцию в этот класс"
    *   **Модель:** `coding`

4.  **`documentation_query` (Вопрос к документации):**
    *   **Когда использовать:** Если пользователь явно спрашивает о документации проекта.
    *   **Примеры:**
        *   "расскажи, как работает система аутентификации в этом проекте по документации"
    *   **Модель:** `default`

5.  **`general_conversation` (Общение):**
    *   **Когда использовать:** Простое общение, приветствия, не требующие никаких действий.
    *   **Примеры:**
        *   "привет"
        *   "как дела?"
    *   **Модель:** `default`

Твой ответ **ОБЯЗАН** быть JSON-объектом с двумя ключами: `crew_type` и `model_key`.

**ПРИМЕР ОТВЕТА:**
Запрос: "какая погода в токио?"
Твой ответ:
{"crew_type": "browsing", "model_key": "default"}
"""
        super().__init__(llm_instance, system_prompt, {}, log_callback)

    def choose_crew_and_model(self, goal: str) -> dict:
        """Определяет команду и необходимую модель, возвращая словарь."""
        self.history = []
        self.llm.max_tokens = 100
        
        response, _ = self.execute_step(f"Классифицируй этот запрос: \"{goal}\"")
        
        self.llm.max_tokens = 1024
        
        try:
            match = re.search(r'\{[\s\S]*\}', response)
            if not match:
                raise ValueError("JSON-объект не найден в ответе модели.")
            
            json_part = match.group(0)
            result = json.loads(json_part)
            
            return {
                "crew_type": result.get("crew_type", "general_conversation"),
                "model_key": result.get("model_key", "default")
            }
        except (json.JSONDecodeError, ValueError) as e:
            self.log(f"[DispatcherAgent] [ERROR] Не удалось извлечь JSON: {e}\nОтвет был: {response}")
            return {"crew_type": "general_conversation", "model_key": "default"}