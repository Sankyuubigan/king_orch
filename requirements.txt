# --- СОКРАЩЕННЫЙ СПИСОК ---
# Оставляем только стабильные, проверенные пакеты с PyPI
requests
llama-cpp-python
Pillow
playwright
fastapi
uvicorn[standard]
python-multipart
tree-sitter
sentence-transformers
tree-sitter-languages
vosk
torch
silero
pyaudio
sounddevice
# Все проблемные MCP-серверы удалены. Мы будем использовать только наши собственные.
```<<<END_FILE>>>

<<<FILE: main.py>>>
```py
# main.py - ЗАПУСК ТОЛЬКО НАДЕЖНЫХ, ПРОВЕРЕННЫХ СЕРВЕРОВ

import tkinter as tk
from tkinter import messagebox
import subprocess
import atexit
import sys
import os
import threading
import time

from ui import AppUI
from engine import OrchestratorEngine
from voice_engine.controller import VoiceController

tool_processes = []

def create_dirs():
    os.makedirs("agents", exist_ok=True); os.makedirs("crews", exist_ok=True)
    os.makedirs("mcp_servers", exist_ok=True); os.makedirs("prompts", exist_ok=True)
    os.makedirs("utils", exist_ok=True); os.makedirs("tools", exist_ok=True)
    os.makedirs("voice_engine/vosk", exist_ok=True); os.makedirs("voice_engine/silero_cache", exist_ok=True)
    for d in ["agents", "crews", "utils", "voice_engine"]:
        init_file = os.path.join(d, "__init__.py")
        if not os.path.exists(init_file):
            with open(init_file, "a"): pass

def start_tool_server(command, log_prefix, ready_signal, cwd=None):
    global tool_processes
    env = os.environ.copy()
    env["PYTHONIOENCODING"] = "utf-8"
    log_messages = []
    creation_flags = subprocess.CREATE_NO_WINDOW if sys.platform == "win32" else 0
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8', errors='ignore', creationflags=creation_flags, env=env, cwd=cwd)
    tool_processes.append(process)
    log_messages.append(f"[{log_prefix}] Сервер запущен (PID: {process.pid})")
    initial_signal_ok = False
    start_time = time.time()
    timeout = 30
    while time.time() - start_time < timeout:
        if process.poll() is not None:
            log_messages.append(f"[{log_prefix}] CRITICAL ERROR: Процесс неожиданно завершился."); 
            try:
                remaining_output = process.stdout.read()
                if remaining_output: log_messages.append("--- ВЫВОД ПРОЦЕССА ПЕРЕД ПАДЕНИЕМ ---"); log_messages.append(remaining_output); log_messages.append("------------------------------------")
            except: pass
            break
        line = process.stdout.readline().strip()
        if line:
            print(f"[{log_prefix}] {line}"); log_messages.append(f"[{log_prefix}] {line}")
            if ready_signal in line: initial_signal_ok = True; break
        else: time.sleep(0.1)
    if not initial_signal_ok:
        log_messages.append(f"[{log_prefix}] ERROR: Не дождались сигнала готовности '{ready_signal}' за {timeout} секунд.")
        return False, log_messages
    threading.Thread(target=lambda: [print(f"[{log_prefix}] {l.strip()}") for l in iter(process.stdout.readline, '') if l], daemon=True).start()
    return True, log_messages

def stop_all_tool_servers():
    print("[Launcher] Остановка всех MCP-серверов...")
    for process in tool_processes:
        if process.poll() is None:
            try: process.terminate()
            except ProcessLookupError: pass
    time.sleep(0.5)
    for process in tool_processes:
        if process.poll() is None:
            try: process.kill()
            except ProcessLookupError: pass
    print("[Launcher] Все MCP-серверы остановлены.")

atexit.register(stop_all_tool_servers)

if __name__ == "__main__":
    create_dirs()
    main_window = tk.Tk()
    main_window.withdraw()
    
    # --- ИЗМЕНЕНО: Запускаем только наши собственные или очень стабильные серверы ---
    servers_to_start = {
        "FeedbackServer": { "cmd": [sys.executable, "-u", "mcp_servers/mcp_feedback_server.py"], "signal": "MCP_FEEDBACK_READY" },
        "FileSystem": { "cmd": [sys.executable, "-u", "mcp_servers/mcp_file_server.py"], "signal": "MCP_FILE_SYSTEM_READY" },
        "GitHub": { "cmd": [sys.executable, "-u", "mcp_servers/mcp_github_server.py"], "signal": "MCP_GITHUB_READY" },
        "GitLab": { "cmd": [sys.executable, "-u", "mcp_servers/mcp_gitlab_server.py"], "signal": "MCP_GITLAB_READY" },
    }

    failed_servers = []
    for name, config in servers_to_start.items():
        print(f"[Launcher] Запускаю сервер '{name}'...")
        success, logs = start_tool_server(config["cmd"], name, config["signal"], cwd=config.get("cwd"))
        if not success:
            failed_servers.append(name)
            print(f"[Launcher] [ERROR] Не удалось запустить сервер '{name}'.")
    
    if failed_servers:
        failed_list = "\n - ".join(failed_servers)
        messagebox.showwarning("Предупреждение при запуске", f"Не удалось запустить следующие MCP-серверы:\n - {failed_list}\n\nПриложение продолжит работу.")

    main_window.deiconify()
    
    engine = OrchestratorEngine(log_callback=lambda msg: print(f"[Engine Log] {msg}"))
    
    try:
        voice_controller = VoiceController(engine)
        engine.set_voice_controller(voice_controller)
    except Exception as e:
        messagebox.showwarning("Ошибка VoiceEngine", f"Не удалось запустить голосовой движок: {e}\n\nПроверьте, что модели Vosk и Silero скачаны и находятся в правильных папках. Программа продолжит работу без голосового управления.")
        print(f"[Launcher] [WARNING] Ошибка инициализации VoiceController: {e}")

    app = AppUI(main_window, engine)
    
    main_window.mainloop()