# backend.py - –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import os
import logging

from copilotkit import CopilotKitSDK, LangGraphAgent
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from langchain_ollama import OllamaLLM
from langchain_core.tools import tool
from langchain.prompts import PromptTemplate
from langchain.agents import AgentExecutor, create_react_agent

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ---
@tool
def search_the_web(query: str): /* ... –≤–∞—à –∫–æ–¥ ... */
@tool
def get_system_info(): /* ... –≤–∞—à –∫–æ–¥ ... */
@tool
def calculate(expression: str): /* ... –≤–∞—à –∫–æ–¥ ... */

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ) ---
logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ SDK...")

try:
    llm = OllamaLLM(model="llama3:8b", base_url="http://127.0.0.1:11434")
    tools = [search_the_web, get_system_info, calculate]

    prompt = PromptTemplate.from_template(
        """You are a helpful AI assistant called "The Orchestrator"...(–≤–∞—à –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç)..."""
    )

    react_agent = create_react_agent(llm, tools, prompt)
    agent_executor = AgentExecutor(
        agent=react_agent,
        tools=tools,
        verbose=True,
        handle_parsing_errors=True
    )
    
    copilot_agent = LangGraphAgent(name="OrchestratorAgent", description="–ü–æ–º–æ—â–Ω–∏–∫", agent=agent_executor)
    sdk = CopilotKitSDK(agents=[copilot_agent])

    logger.info("‚úÖ –ê–≥–µ–Ω—Ç—ã –∏ SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK: {e}", exc_info=True)
    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–¥–∏–º app, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞.
    sdk = None

# --- –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø FASTAPI ---
app = FastAPI(title="Orchestrator Backend")

app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

if sdk:
    add_fastapi_endpoint(app, sdk, "/api/copilotkit")
    logger.info("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç CopilotKit —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
else:
    logger.error("‚ùå SDK –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —ç–Ω–¥–ø–æ–∏–Ω—Ç CopilotKit –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç, –æ–Ω –∂–∏–≤."""
    return {"status": "backend_is_running"}

if os.path.exists("my-copilot-app/dist"):
    app.mount("/", StaticFiles(directory="my-copilot-app/dist", html=True), name="static")

# –≠—Ç–æ—Ç —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –±–ª–æ–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")