# backend.py - –§–ò–ù–ê–õ–¨–ù–´–ô, –ü–†–û–í–ï–†–ï–ù–ù–´–ô, –°–¢–ê–ë–ò–õ–¨–ù–´–ô

import uvicorn
import subprocess
import os
import signal
import time
import asyncio
from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import logging

from copilotkit import CopilotKitSDK, LangGraphAgent
from copilotkit.integrations.fastapi import add_fastapi_endpoint
from langchain_ollama import OllamaLLM
from langchain_core.tools import tool
from langchain.prompts import PromptTemplate
from langchain.agents import AgentExecutor, create_react_agent

OLLAMA_PATH = r"D:\Projects\universal_orchestrator\ollama_runtime\ollama.exe"
DEFAULT_MODEL = "llama3:8b"
ollama_process = None
sdk: CopilotKitSDK = None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–ø–æ–ª–Ω—ã–π –∫–æ–¥) ---
@tool
def search_the_web(query: str) -> str:
    """Searches the web for the given query."""
    logger.info(f"üîé –ü–æ–∏—Å–∫ –≤ –≤–µ–±–µ: {query}")
    try:
        import requests
        url = f"https://api.duckduckgo.com/?q={query}&format=json&no_html=1"
        response = requests.get(url, timeout=10).json()
        return response.get('AbstractText') or response.get('Abstract') or f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

@tool
def get_system_info() -> str:
    """Get basic system information."""
    import platform
    return f"–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}"

@tool
def calculate(expression: str) -> str:
    """Calculate mathematical expressions safely."""
    try:
        allowed_chars = set('0123456789+-*/.() ')
        if not all(c in allowed_chars for c in expression):
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {eval(expression)}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
def create_app():
    app = FastAPI(title="Orchestrator Backend")

    @app.on_event("startup")
    async def on_startup():
        global ollama_process, sdk
        logger.info("üöÄ Backend: –ó–∞–ø—É—Å–∫...")
        try:
            ollama_process = subprocess.Popen([OLLAMA_PATH, "serve"], creationflags=subprocess.CREATE_NO_WINDOW)
            await asyncio.sleep(5)
            logger.info(f"‚úÖ Backend: –ü—Ä–æ—Ü–µ—Å—Å Ollama –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Ollama: {e}", exc_info=True)
            os.kill(os.getpid(), signal.SIGTERM)
            return

        try:
            logger.info("ü§ñ Backend: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
            llm = OllamaLLM(model=DEFAULT_MODEL, base_url="http://127.0.0.1:11434")
            tools = [search_the_web, get_system_info, calculate]
            prompt = PromptTemplate.from_template(
                """You are a helpful AI assistant called "The Orchestrator". You must respond in Russian language.
                Available tools: {tools}
                Use the following format:
                Question: the input question you must answer
                Thought: you should always think about what to do
                Action: the action to take, should be one of [{tool_names}]
                Action Input: the input to the action
                Observation: the result of the action
                Thought: I now know the final answer
                Final Answer: the final answer to the original input question in Russian
                Begin!
                Question: {input}
                Thought: {agent_scratchpad}"""
            )
            react_agent = create_react_agent(llm, tools, prompt)
            
            # --- –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–¢–ê –°–¢–†–û–ö–ê –î–ï–õ–ê–ï–¢ –ê–ì–ï–ù–¢ –£–°–¢–û–ô–ß–ò–í–´–ú ---
            agent_executor = AgentExecutor(
                agent=react_agent,
                tools=tools,
                verbose=True,
                handle_parsing_errors=True # <-- –≠–¢–û –°–ü–ê–°–ê–ï–¢ –û–¢ –ü–ê–î–ï–ù–ò–ô
            )
            
            copilot_agent = LangGraphAgent(name="OrchestratorAgent", description="–ü–æ–º–æ—â–Ω–∏–∫", agent=agent_executor)
            sdk = CopilotKitSDK(agents=[copilot_agent])
            logger.info("‚úÖ Backend: –ê–≥–µ–Ω—Ç—ã –∏ SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
            raise

    app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

    @app.get("/health")
    async def health_check():
        if sdk is not None: return {"status": "healthy"}
        raise HTTPException(status_code=503, detail="Server is initializing...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    def get_sdk():
        if sdk is None: raise HTTPException(status_code=503, detail="SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return sdk
    add_fastapi_endpoint(app, get_sdk, "/api/copilotkit")

    if os.path.exists("my-copilot-app/dist"):
        app.mount("/", StaticFiles(directory="my-copilot-app/dist", html=True), name="static")

    return app

if __name__ == "__main__":
    app = create_app()
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")